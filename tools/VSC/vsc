#!/bin/bash
APP_NAME="vsc"
APP_FUZZY_NAME="VScript Compiler"
APP_VERSION="0.5 beta"

#Pregenerated code ahead. Here be dragons?
VS_VERSION=1.2
VS_CODENAME="Cayenne"

#Pregenerated code ahead. Here be dragons?
if [ "$1" == "-h" ]
then
  echo "VScript Version $VS_VERSION $VS_CODENAME"
fi
dump(){
echo "Crash Dump"
echo "VScript Version: $VS_VERSION $VS_CODENAME"
echo "Loaded Libraries:"
for lib in $loadedLibs
do
echo -ne $lib
done

echo
echo "Loaded Modules:"
for mod in $loadedMods
do
echo -ne $mod
done

echo
echo "Variables:"
for var in $vars
do
echo -ne $var
done

echo
echo -e "\nApp metadata:"
echo "  App name: $APP_NAME"
echo "  App display name: $APP_FUZZY_NAME"
echo "  App version: $APP_VERSION"
}
throw(){
echo "ERROR: $1 in program $APP_NAME"
echo "Error Detected... Dumping program data"
dump
exit 1
}
var(){
vars="$vars\n$1"
eval "$1"
}
loadedLibs="$loadedLibs\ncore V1.0: VScript Core Module"

# end of library core 

VSC.commitMetadata(){
 echo "APP_NAME=$VSC_PROG_NAME" >> $1
 echo "APP_FUZZY_NAME=$VSC_PROG_DISPLAY_NAME" >> $1
 echo "APP_VERSION=$VSC_PROG_VERSION" >> $1
 echo "VS_VERSION=$VS_VERSION" >> $1
 echo "VS_CODENAME=$VS_CODENAME" >> $1
}
VSC.compileSource(){
 # If we are doing a single file compile
 if ! [ -f build.conf ]
 then
  var SRC_FILE=${1%.*}.vss
  if [ $VSC_PROG_TYPE == "lib" ]
  then
   var OUT_FILE=${1%.*}.vsl
  else
   var OUT_FILE=${1%.*}.vsa
  fi
  rm $OUT_FILE
  # Import Handling
  # Get all imports from file after making sure that we have imports.
  if [ "$VSC_APP_TYPE" == "lib"]
  then
  if [ "$(VSC.getImports $SRC_FILE)" != "" ]
  then
   for import in $(VSC.getImports "$SRC_FILE") 
   do
    # If the import actually exists
    if VSC.resolveImport "$import"
    then
     # Capture the import location, Write down that we found it, and if we haven't already imported it then import it into the class
     IMPORT_LOC=$(VSC.resolveImportPath "$import")
     if ! $(echo $ADDEDIMPORTS | grep $import)
     then 
      ADDEDIMPORTS="$ADDEDIMPORTS $import"
      cat $IMPORT_LOC >> $OUT_FILE
     fi
    fi
   done
  fi
  fi
  cat "$SRC_FILE" >> "$OUT_FILE"

  echo "loadedMods=\"n/a due to VSC compilation\"" >> $OUT_FILE
  echo "compiler=\"VSC\"" >> $OUT_FILE

  if ! [ $VSC_PROG_TYPE == "lib" ]
  then
  echo 'if [ "$1" != "--getdata" ]' >> $OUT_FILE
  echo 'then' >> $OUT_FILE
  echo 'main $@' >> $OUT_FILE
  echo 'fi' >> $OUT_FILE
  fi

  # Remove all comments from output class
  sed -i '/^#/d' $OUT_FILE
  sed -i '/^\<package\>/d' $OUT_FILE
  if [ "$VSC_APP_TYPE" == "lib" ]
  then
   sed -i '/^\<import\>/d' $OUT_FILE
  fi
  VSC.commitMetadata $OUT_FILE

 #if we are doing a project compile
 else 
  SRC_FILE=$VSC_PROG_NAME
  if [ "$VSC_PROG_TYPE" == "lib" ]
  then
   OUT_FILE=$VSC_PROG_NAME.vsl
  else
   OUT_FILE=$VSC_PROG_NAME.vsa
  fi
  # Import Handling
  # Get all imports from file after making sure that we have imports.
  if [ "$VSC_APP_TYPE" == "lib" ]
  then
  if [ "$(VSC.getImports $1)" != "" ]
  then
   for import in $(VSC.getImports "$1") 
   do
    # If the import actually exists
    if VSC.resolveImport "$import"
    then
     # Capture the import location, Write down that we found it, and if we haven't already imported it then import it into the class
     IMPORT_LOC=$(VSC.resolveImportPath "$import")
     if ! $(echo $ADDEDIMPORTS | grep $import)
     then 
     ADDEDIMPORTS="$ADDEDIMPORTS $import"
     cat $IMPORT_LOC >> $OUT_FILE
     fi
    fi
   done
  fi
  fi
  cat $1 >> $OUT_FILE

  # Remove all comments from output class
  if [ "$VSC_APP_TYPE" == "lib" ]
  then  
   sed -i '/^\<import\>/d' $OUT_FILE
  fi
  sed -i '/^\<package\>/d' $OUT_FILE
  sed -i '/^#/d' $OUT_FILE    
  echo "loadedLibs=\"$(echo $ADDEDIMPORTS | tr " " "\n")\"" >> $OUT_FILE
  echo "loadedMods=\"n/a due to VSC compilation\"" >> $OUT_FILE
  echo "compiler=\"VSC\"" >> $OUT_FILE

  if ! [ $VSC_PROG_TYPE == "lib" ]
  then
   echo 'if [ "$1" != "--getdata" ]' >> $OUT_FILE
   echo 'then' >> $OUT_FILE
   echo 'main $@' >> $OUT_FILE
   echo 'fi' >> $OUT_FILE
  fi
 fi
}
VSC.getImports(){
echo $(grep '^import.' $1 | sed 's/import //g' | tr ' ' '\n')
}
VSC.getPackage(){
echo $(grep '^package.' $1 | sed 's/package //g')
}
VSC.loadConfig(){
 # Default Configuration
 VSC_LIB_PATH=/usr/lib/VScript/libs
 VSC_PROG_NAME="untitled_app"
 VSC_PROG_VERSION="1.0"
 VSC_PROG_DISPLAY_NAME="Untitled-VSC-Application"
 VSC_PROG_TYPE="app"

 # Load System Configuration
 if [ -e /etc/VScript/$VS_VERSION/VSC-build.conf ]
 then 
 source /etc/VScript/$VS_VERSION/VSC-build.conf
 fi

 # Project Config
 if [ -e ./build.conf ]
 then
  LIBPATHOLD=$VSC_LIB_PATH
  source ./build.conf  
  VSC_LIB_PATH="$LIBPATHOLD $VSC_LIB_PATH"
 else
  echo "Missing build.conf: using default config"
 fi
 echo "Loaded Configuration"
}
main(){
 echo "Welcome to $APP_FUZZY_NAME $APP_VERSION"
 echo "loading configuration for $APP_NAME"
 VSC.loadConfig
 if [ "$1" == "make" ]
 then
  VSC.makeConfig
  exit
 fi

 if [ -f "build.conf" ] && [ $# == 0 ] || [ "$1" == "-p" ]
 then
  VSC.projectCompile
  echo "Finished Compiling $VSC_PROG_NAME"
 else
  if [ $# > 1 ]
  then 
   if [ $1 == "-I" ]
   then
    if [ -d "$2" ]
    then
     VSC_LIB_PATH=$2
    fi
   fi
   if [ "$1" == "-l" ]
   then
    VSC_APP_TYPE=lib
   fi
   VSC.compileSource "${@: -1}"
  else
   VSC.compileSource $1
  fi
  echo "Finished Compiling $1"
 fi
 rm -f 1
}
VSC.makeConfig(){
 touch Makefile
 touch build.conf

 if [ -f ./vramen ]
 then
  echo "Vramen Project Detected... Do You Want To Convert It To VSC [Y/n]"
  read ans
  if [ "$ans" == "n" ]
  then
   echo "NOT Upgrading Vramen Project"
   echo -n "Project name: "
   read name
   name=$(echo $name | tr ' ' '-')
   echo -n "Project display name: "
   read display_name
   echo -n "Project version: "
   read version
   right="0"
  
   while [ "$right" != "1" ]
   do
    echo -n "Project type (app, lib): "
    read type
    if [ "$type" == "app" ] || [ "$type" == "lib" ]
    then
     right="1"
    else
     echo "Invalid type please select app or lib"
     right="0"
    fi
   done

   echo -n "Project source folder name (relative to here): "
   read src

   if ! [ -d "$src" ]
   then
    mkdir $src
   fi
   echo "Building makefile for $display_name"

   echo "VSC_PROG_NAME=$name" >> build.conf
   echo "VSC_PROG_DISPLAY_NAME=\"$display_name\"" >> build.conf
   echo "VSC_PROG_VERSION=\"$version\"" >> build.conf
   echo "VSC_PROG_TYPE=$type" >> build.conf
   echo "VSC_SRC_LOCATION=\"$(pwd)/$src\"" >> build.conf
	
   echo "#Autogenerated by VSC" >> Makefile
   echo "build:" >> Makefile
   echo -e "\tvsc" >> Makefile
  else
   source ./vramen
   echo "VSC_PROG_NAME=$APP_NAME" >> build.conf
   echo "VSC_PROG_DISPLAY_NAME=\"$APP_FUZZY_NAME\"" >> build.conf
   echo "VSC_PROG_VERSION=\"$APP_VERSION\"" >> build.conf
   echo "VSC_PROG_TYPE=$APP_TYPE" >> build.conf
   echo "VSC_SRC_LOCATION=\"$(pwd)/src\"" >> build.conf

   echo "#Autogenerated by VSC" >> Makefile
   echo "build:" >> Makefile
   echo -e "\tvsc" >> Makefile
   echo "Upgraded to VSC"
   fi
  else
   echo -n "Project name: "
   read name
   name=$(echo $name | tr ' ' '-')
   echo -n "Project display name: "
   read display_name
   echo -n "Project version: "
   read version
   right="0"
  
   while [ "$right" != "1" ]
   do
    echo -n "Project type (app, lib): "
    read type
    if [ "$type" == "app" ] || [ "$type" == "lib" ]
    then
     right="1"
    else
     echo "Invalid type please select app or lib"
     right="0"
    fi
   done

   echo -n "Project source folder name (relative to here): "
   read src

   if ! [ -d "$src" ]
   then
    mkdir $src
   fi
   echo "Building makefile for $display_name"

   echo "VSC_PROG_NAME=$name" >> build.conf
   echo "VSC_PROG_DISPLAY_NAME=\"$display_name\"" >> build.conf
   echo "VSC_PROG_VERSION=\"$version\"" >> build.conf
   echo "VSC_PROG_TYPE=$type" >> build.conf
   echo "VSC_SRC_LOCATION=\"$(pwd)/$src\"" >> build.conf
	
   echo "#Autogenerated by VSC" >> Makefile
   echo "build:" >> Makefile
   echo -e "\tvsc" >> Makefile  
  fi
}
VSC.projectCompile(){
 echo "Build Configuration Found... Compiling Project"
 for f in $(ls $VSC_SRC_LOCATION/*.vss)
 do
  echo Compiling $f
  VSC.compileSource $f
 done
 if [ "$VSC_PROG_TYPE" == "app" ]
 then
  VSC.commitMetadata $VSC_PROG_NAME.vsa
 fi
}
VSC.resolveImport(){
 if [ "$1" == "" ]
 then
  throw "no import name specified in VSC:resolveImport"
  return 1
 fi

 for loc in $VSC_LIB_PATH
 do
  if [ -f "$loc/$1.vsl" ]
  then
   echo "import found"
   return 0
  fi
 done
 throw "invalid import: $1 in VSC:resolveImport"
}
VSC.resolveImportPath(){
 if [ "$1" == "" ]
 then
  throw "no import name specified in VSC:resolveImportPath"
  return 1
 fi
 
 for loc in $VSC_LIB_PATH
 do
  if [ -f "$loc/$1.vsl" ]
  then
   echo $loc/$1.vsl
   return 0
  fi
 done
 throw "invalid import: $1 in VSC:resolveImportPath"
}
if [ "$1" != "--getdata" ]
then
main $@
fi
