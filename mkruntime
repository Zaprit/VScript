#!/bin/bash
source vs-version-data
info(){
echo -e "VScript runtime builder V1.0 for VScript $VS_VERSION $VS_CODENAME\n"
}

buildlibs(){
echo "Buildlibs Deprecated... Use build instead"
}

clean(){
 rm -rf tmp
 rm -rf build
}

cleanbuild(){
 clean
 build
}

build(){
  mkdir tmp
  if [ -d "./build" ]
  then
    echo "Already Build... If This Is A Mistake Run mkruntime Again But With cleanbuild Instead Of build"
    exit
  fi
  mkdir build
  touch tmp/vsruntime.base
  echo "Created empty vsruntime.base"

  cd src
  for lib in $(ls ./)
  do
    if [ -e $lib/.en ]
    then
      cd $lib
      ./vramen
      cp *.vlib ../../tmp
      cd ../
    fi
  done
  cd ..

  echo 'VS_VERSION='$VS_VERSION > tmp/vsruntime.base
  echo 'VS_CODENAME='"\"$VS_CODENAME\"" >> tmp/vsruntime.base
  echo '' >> vsruntime.base
  echo '#Pregenerated code ahead. Here be dragons?' >> tmp/vsruntime.base
  echo "Added built in variables"

  cat help-template >> tmp/vsruntime.base
  echo "Added help template"

  for lib in $(ls src); do
    if [ -e "src/$lib/.en" ]
    then
      cat "src/$lib/out.vlib" >> tmp/vsruntime.base
      echo -e "\n# end of library $lib \n" >> vsruntime.base
    fi
  done
}

clean(){
  rm vsruntime.base
  echo "Cleaned base"
}

enlib(){
 touch src/$1/.en
}

dislib(){
 rm src/$1/.en
}

lslibs(){
 for i in $(ls src)
 do
  if [ -e src/$i/.en ]
  then
   ENLIBS=$ENLIBS\n$i
  else
   DISLIBS=$DISLIBS\n$i
  fi
 done
 echo "Enabled Libraries:"
 echo -e "$ENLIBS"
 echo "Disabled Libraries:"
 echo -e "$DISLIBS"
}

help(){
echo "VScript mkruntime 1.0"
echo "help      —— Shows this help"
echo "clean     —— Cleans Runtime"
echo "build     —— Builds vsruntime.base"
echo "buildlibs —— DEPRECATED DOES NOT WORK. Build all enabled libraries in the src folder"
echo "enlib     —— Enable library"
echo "dislib    —— Disable library"
echo "lslibs    —— List Libraries"
}


$1
EXIT_STATUS=$?
if [ "$1" == "" ] || [ "$EXIT_STATUS" != "0" ]
then
help
fi
